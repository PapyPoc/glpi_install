#!/usr/bin/env bash
#
# GLPI install script
# Author: PapyPoc
# Version: 1.9.0
# Main file
# Langage pris en compte français et anglais
#
# set -Eeuo pipefail
clear # Nettoyer le terminal
REP_SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" # Définir le répertoire du script
# shellcheck disable=SC1091
source "${REP_SCRIPT}/function" # Fichier de fonctions
trap 'on_error' ERR
# shellcheck disable=SC1091
source "${REP_SCRIPT}/config" # Fichier de variable
load_language # Fichier de langue
info "${ICON_INFO} ${MSG_LOAD_LANGUAGE}"
# Regarde si la distribution est conforme
info "${ICON_INFO} ${MSG_GLPI_INSTALL_START_SCRIPT}"
# Vérifie la distribution
info "${ICON_INFO} ${MSG_GLPI_INSTALL_CHECK_DISTRIBUTION}"
if ! check_distro; then # Vérification de la distribution
    dialog --title "${ICON_ERROR} ${MSG_DIALOG_TITLE_ERROR}" --msgbox "${MSG_GLPI_INSTALL_CHECK_DISTRO_FAILED}" 6 50
    error "${ICON_ERROR} ${MSG_GLPI_INSTALL_CHECK_DISTRO_FAILED}"
    exit 1
fi
# Demande les options d'installation ou de mise à jour
info "${ICON_INFO} ${MSG_GLPI_INSTALL_PROMPT_INSTALL_OPTIONS}"
if ! selection_menu; then # Demande les options d'installation
    if [[ $? == 100 ]]; then
        info "${ICON_INFO} ${MSG_INSTALL_UPGRADE_EXITING}"
        exit 0
    fi
    if [[ ${SELECTED_MENU} == 0 ]] || [[ ${SELECTED_MENU} == 7 ]]; then
        info "${ICON_INFO} ${MSG_GLPI_INSTALL_PROMPT_INSTALL_OPTIONS_ABORT}"
        exit 1
    fi
fi
info "Fichier de sauvegarde des mots de passe : ${FICHIER_MSG}${DB_NAME}.txt"
# Droit sur le fichier de sauvegarde des mots de passe
if file_save=$(find "${INVOKING_HOME}/saved_credentials" -type f -name "${FICHIER_MSG}${DB_NAME}*" | head -n 1); then # Vérifie si le fichier de sauvegarde existe
    info "${ICON_INFO} ${MSG_GLPI_INSTALL_BACKUP_CREATED}"
    chmod 500 "${file_save}"
    chown root:root "${file_save}"
    dialog --title "${ICON_INFO} ${MSG_DIALOG_TITLE_INFO}" --msgbox "${MSG_GLPI_INSTALL_BACKUP_CREATED_1}${file_save}${MSG_GLPI_INSTALL_BACKUP_CREATED_2}" 6 60
    export file_save
else
    dialog --title "${ICON_ERROR} ${MSG_DIALOG_TITLE_ERROR}" --msgbox "${MSG_GLPI_INSTALL_BACKUP_NOT_FOUND}${file_save}.txt" 6 60
    error "${ICON_ERROR} ${MSG_GLPI_INSTALL_BACKUP_NOT_FOUND} ${file_save}.txt"
    exit 1
fi
# Afficher le fichier de sauvegarde des mots de passe
if [ -f "${file_save}" ] || [ -s "${file_save}" ]; then
    info "${ICON_WARN} ${MSG_GLPI_INSTALL_DISPLAY_RESULT}"
    display_result
fi
# Affichage des fichiers de logs s'ils existent
LOGFILES=("${ERRORFILE}" "${DEBUGFILE}" "${UPDATEFILE}")
LOGFILEP=()
# Parcourt chaque fichier pour vérifier sa taille
for LOGFILE in "${LOGFILES[@]}"; do
    if [[ -s "${LOGFILE}" ]]; then
        LOGFILEP+=("${LOGFILE}")
    else
        [[ -f "${LOGFILE}" ]] && rm -f "${LOGFILE}"
    fi
done
# S’il reste des logs non vides, on les affiche
if (( ${#LOGFILEP[@]} > 0 )); then
    info "${ICON_INFO} ${MSG_GLPI_INSTALL_DISPLAY_RESULT_LOGS}"
    info "${ICON_WARN} ${MSG_GLPI_INSTALL_DISPLAY_RESULT_WARN_LOGS} ${LOGFILEP[*]}"
    dialog --title "${ICON_WARN} ${MSG_DIALOG_TITLE_WARNING}" \
           --msgbox "${MSG_GLPI_INSTALL_DISPLAY_RESULT_WARN_LOGS} ${LOGFILEP[*]}" 8 70
fi
# Affichage du fichier d'information s'il existe
if [ -s "${INFOFILE}" ]; then
    info "${ICON_INFO} ${MSG_GLPI_INSTALL_DISPLAY_RESULT_INFO_LOGS} ${INFOFILE}"
    dialog --title "${ICON_INFO} ${MSG_DIALOG_TITLE_INFO}" --msgbox "${MSG_GLPI_INSTALL_DISPLAY_RESULT_INFO_LOGS} ${INFOFILE}" 8 70
fi
clear
info "${ICON_INFO} ${MSG_GLPI_INSTALL_END_SCRIPT}"