#!/usr/bin/env bash
#
# GLPI install script
# Author: PapyPoc
# Version 1.8.0
# Variable file
#
set -euo pipefail
# Ne pas continuer si le script est exécuté directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo -e "Ce fichier doit être sourcé, pas exécuté.\n" >&2
    echo -e "This file must be sourced, not executed.\n" >&2
    exit 1
fi
# Determine the home directory of the user who invoked the installer (supports sudo).
if [ -n "${SUDO_USER:-}" ] && [ "${SUDO_USER}" != "root" ]; then
    INVOKING_USER="$SUDO_USER"
else
    INVOKING_USER="${LOGNAME:-${USER:-$(logname 2>/dev/null || echo root)}}"
fi
INVOKING_HOME=""
if command -v getent >/dev/null 2>&1; then
    INVOKING_HOME=$(getent passwd "$INVOKING_USER" | cut -d: -f6 || true)
fi
if [ -z "$INVOKING_HOME" ]; then
    INVOKING_HOME=$(eval echo "~$INVOKING_USER" 2>/dev/null || true)
fi
INVOKING_HOME="${INVOKING_HOME:-${HOME:-/root}}"
# === Constantes globales exportables ===
# Ensure required commands are present by delegating to ensure_dependencies()
# Source function (where ensure_dependencies is defined) relative to this file
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ -f "${script_dir}/function" ]; then
    # shellcheck disable=SC1091
    source "${script_dir}"/function
fi
# Try to ensure dependencies (curl, jq, openssl) are available
if declare -F ensure_dependencies >/dev/null 2>&1; then
    ensure_dependencies || { echo "Failed to ensure dependencies" >&2; return 1; }
    if [ "${NEED_RESTART:-0}" -eq 1 ]; then
        # Restart top-level script that sourced this file
        idx=$(( ${#BASH_SOURCE[@]} - 1 ))
        top_script="${BASH_SOURCE[$idx]}"
        if [ -n "$top_script" ] && [ "$top_script" != "$(basename "$SHELL")" ]; then
            echo "Dependencies installed. Restarting $top_script..." >&2
            if [ -x "$top_script" ]; then
                exec "$top_script"
            else
                exec "$SHELL" -lc "bash '$(printf '%q' "$top_script")'"
            fi
        else
            echo "Dependencies installed. Please re-run your installer." >&2
            return 0
        fi
    fi
else
    echo "Warning: ensure_dependencies not available; skipping automatic install check." >&2
fi
DOWNLOADLINK=$(curl -s https://api.github.com/repos/glpi-project/glpi/releases/latest | jq -r '.assets[0].browser_download_url')
if [ -z "$DOWNLOADLINK" ] || [ "$DOWNLOADLINK" = "null" ]; then
    echo "Erreur: Impossible de récupérer le lien de téléchargement GLPI" >&2
    return 1
fi
NEW_VERSION=$(curl -s https://api.github.com/repos/glpi-project/glpi/releases/latest | jq -r '.name')
if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" = "null" ]; then
    echo "Erreur: Impossible de récupérer la version GLPI" >&2
    return 1
fi
ROUGE='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'
DEBIAN_VERSIONS=("11" "12")
UBUNTU_VERSIONS=("23.10" "24.10")
ALMA_VERSIONS=("9.5")
CENTOS_VERSIONS=("9")
ROCKY_VERSIONS=("9.5")
REDHAT_VERSIONS=("9.5")
REP_BACKUP="/root/glpi_sauve/"
REP_GLPI="/var/www/html/glpi/"
SQLROOTPWD=$(openssl rand -base64 48 | cut -c1-18)
SQLGLPIPWD=$(openssl rand -base64 48 | cut -c1-18)
ADMINGLPIPWD=$(openssl rand -base64 48 | cut -c1-12)
POSTGLPIPWD=$(openssl rand -base64 48 | cut -c1-12)
TECHGLPIPWD=$(openssl rand -base64 48 | cut -c1-12)
NORMGLPIPWD=$(openssl rand -base64 48 | cut -c1-12)
DB_NAME="glpi"
DB_USER="glpi_user"
BDD_BACKUP="bdd_glpi-$(date +"%d-%m-%Y_%H-%M-%S").sql"
# Message/log files placed in the invoking user's home directory.
FICHIER_MSG="${INVOKING_HOME}/sauve_mdp.txt"
ERRORFILE="${INVOKING_HOME}/error.log"
LOGFILE="${INVOKING_HOME}/install.log"
export ROUGE CYAN NC
export DOWNLOADLINK NEW_VERSION
export DEBIAN_VERSIONS UBUNTU_VERSIONS ALMA_VERSIONS CENTOS_VERSIONS ROCKY_VERSIONS REDHAT_VERSIONS
export REP_BACKUP REP_GLPI
export SQLROOTPWD SQLGLPIPWD ADMINGLPIPWD POSTGLPIPWD TECHGLPIPWD NORMGLPIPWD
export DB_NAME DB_USER BDD_BACKUP
export FICHIER_MSG ERRORFILE LOGFILE