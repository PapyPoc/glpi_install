#!/usr/bin/env bash
#
# GLPI install script
# Author: PapyPoc
# Version: 1.8.1
# Script d'installation GLPI
# Langage pris en compte : français et anglais
#
set -Eeuo pipefail
clear # Nettoyer le terminal
# Répertoire du script
REP_SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Utilisateur d'origine
ORIG_USER="${SUDO_USER:-$(logname 2>/dev/null || echo "${USER:-unknown}")}"
# Dépendances requises
DEPENDENCIES="curl jq openssl sudo dialog git shadow"
# URL du dépôt git
GIT="https://github.com/PapyPoc/glpi_install.git"
# Branche git à utiliser
BRANCHE="dev"
export ORIG_USER REP_SCRIPT GIT BRANCHE
# --- Fonctions d'affichage ---
warn() { echo -e "\033[0;31m[ERREUR]\033[0m $1"; }
info() { echo -e "\033[0;36m[INFO]\033[0m $1"; }
# --- Vérifie et installe les dépendances manquantes ---
ensure_dependencies() {
    NEED_RESTART=0
    local missing=()
    local -a check_cmds
    if [ $# -ge 1 ] && [ -n "$1" ]; then
        read -r -a check_cmds <<< "$1"
    else
        read -r -a check_cmds <<< "$DEPENDENCIES"
    fi
    for cmd in "${check_cmds[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing+=("$cmd")
        fi
    done
    if [ ${#missing[@]} -eq 0 ]; then
        return 0
    fi
    echo "Dépendances manquantes : ${missing[*]}. Tentative d'installation..."
    local pkgmgr install_cmd
    local pkgs="${missing[*]}"
    if command -v apt-get >/dev/null 2>&1; then
        pkgmgr="apt-get"
        install_cmd="apt-get update -qq && apt-get install -y -qq ${pkgs}"
    elif command -v dnf >/dev/null 2>&1; then
        pkgmgr="dnf"
        install_cmd="dnf install -y -q ${pkgs}"
    elif command -v yum >/dev/null 2>&1; then
        pkgmgr="yum"
        install_cmd="yum install -y -q ${pkgs}"
    elif command -v apk >/dev/null 2>&1; then
        pkgmgr="apk"
        install_cmd="apk add --no-cache ${pkgs}"
    elif command -v pacman >/dev/null 2>&1; then
        pkgmgr="pacman"
        install_cmd="pacman -Syu --noconfirm ${pkgs}"
    elif command -v zypper >/dev/null 2>&1; then
        pkgmgr="zypper"
        install_cmd="zypper install -y ${pkgs}"
    else
        warn "Aucun gestionnaire de paquets pris en charge trouvé pour installer : ${pkgs}"
        return 1
    fi
    info "Installation via ${pkgmgr} : ${pkgs}"

    if ! bash -c "$install_cmd"; then
        warn "Échec de l'installation des dépendances : ${pkgs}"
        return 1
    fi
    local still_missing=()
    for cmd in "${check_cmds[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            still_missing+=("$cmd")
        fi
    done
    if [ ${#still_missing[@]} -gt 0 ]; then
        warn "Commandes toujours manquantes après l'installation : ${still_missing[*]}"
        sleep 5
        return 1
    fi
    NEED_RESTART=1
    export NEED_RESTART
    return 0
}
# --- Détection de la distribution ---
if source /etc/os-release 2>/dev/null; then
    DISTRO_ID=$(echo "$ID" | tr '[:upper:]' '[:lower:]')
    info "Distribution détectée : ${DISTRO_ID^} $(echo "${VERSION_ID}" | xargs)"
else
    warn "Distribution non détectée ou non prise en charge."
    exit 1
fi
# --- Détermination du groupe administrateur ---
case "${DISTRO_ID}" in
    debian|ubuntu)
        ADMIN_GROUP="sudo"
        ;;
    centos|rhel|rocky|almalinux|fedora)
        ADMIN_GROUP="wheel"
        ;;
    *)
        ADMIN_GROUP="sudo"
        info "Distribution non reconnue. Utilisation de '${ADMIN_GROUP}' par défaut."
        ;;
esac
# Vérification des droits root ---
if [ "$EUID" -ne 0 ]; then
    if id -nG "${ORIG_USER}" 2>/dev/null | grep -Eqw "sudo|wheel"; then
        info "Relance du script avec les droits administrateur..."
        sleep 2
        info "Utilisation de l'utilisateur ${ORIG_USER} avec les droits ${ADMIN_GROUP}."
        exec sudo -E bash "$0" "$@"
    else
        warn "L'utilisateur ${ORIG_USER} n'a pas les droits administrateur (${ADMIN_GROUP})."
        if command -v usermod >/dev/null 2>&1; then
            usermod -aG "$ADMIN_GROUP" "${ORIG_USER}" || true
        elif command -v adduser >/dev/null 2>&1; then
            adduser "$ORIG_USER" "$ADMIN_GROUP" || true
        else
            warn "Impossible d'ajouter ${ORIG_USER} au groupe ${ADMIN_GROUP}."
            exit 1
        fi
        warn "Ajout de ${ORIG_USER} au groupe ${ADMIN_GROUP}. Veuillez vous reconnecter et relancer le script."
        exit 0
    fi
fi
# --- Vérification et installation des dépendances ---
if ensure_dependencies "curl jq openssl git sudo dialog shellcheck"; then
    info "Toutes les dépendances sont satisfaites."
    sleep 2
else
    warn "Échec de la vérification ou installation des dépendances."
    exit 1
fi
if [ "${NEED_RESTART:-0}" -eq 1 ]; then
    info "Dépendances installées. Redémarrage du script..."
    sleep 3
    exec "$0" "$@"
fi
# --- Gestion du dépôt glpi_install ---
if [ -d "${REP_SCRIPT}/glpi_install" ]; then
    cd "${REP_SCRIPT}/glpi_install" && git pull origin "${BRANCHE}" && cd ..
else
    git clone "${GIT}" -b "${BRANCHE}" "${REP_SCRIPT}/glpi_install" || {
        warn "Échec du clonage du dépôt git ${GIT}."
        exit 1
    }
fi
chmod +x "${REP_SCRIPT}/glpi_install/glpi-install"
# --- Lancer le script principal ---
if [ -x "${REP_SCRIPT}/glpi_install/glpi-install" ]; then
    exec "${REP_SCRIPT}/glpi_install/glpi-install" "$@"
else
    warn "Le script '${REP_SCRIPT}/glpi_install/glpi-install' n'est pas exécutable ou introuvable."
    exit 1
fi
# --- Fin du script ---
exit 0
